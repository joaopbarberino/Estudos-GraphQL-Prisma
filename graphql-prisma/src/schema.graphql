type Query {
    greeting(name: String): String!
    users(query: String): [User]
    posts(query: String): [Post]
    grades: [Int]!
    me: User!
    guitar: Product
    post: Post
    comments: [Comment!]
}

type Mutation {
    createUser(data: CreateUserInput!): User!
    updateUser(id: ID!, data: UpdateUserInput!): User!
    deleteUser(id: ID!): User!
    createPost(post: CreatePostInput!): Post!
    updatePost(id: ID!, data: UpdatePostInput!): Post!
    deletePost(id: ID!): Post!
    createComment(comment: CreateCommentInput!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    
}

type Subscription {
    comment(postId: ID!): CommentSubPayload!
    post: PostSubPayload!
}

input CreateUserInput {
    name: String!
    email: String!
}

input UpdateUserInput {
    name: String
    email: String
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
    author: ID!
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput {
    post: ID!
    author: ID!
    text: String!
}

input UpdateCommentInput {
    text: String
}

type User {
    id: ID!
    name: String!
    email: String!
    posts: [Post]
    comments: [Comment]
}

type Product {
    id: ID!
    title: String!
    price: Float!
    releaseYear: Int
    rating: Float!
    inStock: Boolean!
    owner: User
}

type Post {
    id: ID!
    published: Boolean!
    author: User!
    title: String!
    body: String!
    comments: [Comment]        
}

type Comment {
    id: ID!
    author: User!
    post: Post!
    text: String!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

# PostSubscriptionPayload
type PostSubPayload {
    mutation: MutationType!
    data: Post!
}

type CommentSubPayload {
    mutation: MutationType!
    data: Comment!
}
